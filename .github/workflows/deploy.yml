name: Build and Deploy Spring Boot to AWS EC2

on: workflow_dispatch
# 환경변수 설정
env:
  # AWS 관련
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: mywikifronts3
  CODE_DEPLOY_APPLICATION_NAME: mywikifrontapplication
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: mywikifront
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code.
        uses: actions/checkout@v4

      - name: Check Node v
        run: node -v

     
      
      #- name: Generate Environment Variables File      
       # run: |
        #  echo "NEXT_PUBLIC_BACK_END_URL=$NEXT_PUBLIC_BACK_END_URL" >> .env
         
        #env:
         # NEXT_PUBLIC_BACK_END_URL: ${{secrets.NEXT_PUBLIC_BACK_END_URL}}
      - name: Check .env file contents
        run: | 
            cat .env   

      - name: Cache node modules
        uses: actions/cache@v4
        id: cache
        with:
          # node_modules라는 폴더를 검사하여
          path: node_modules
          # 아래 키값으로 cache가 돼있는지 확인합니다.
          key: npm-packages-${{ hashFiles('**/package-lock.json') }}

      - name: Install Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install

      #- name: Build
       # run: |
        #  npm run build

      #- name: zip create
       # run: |
        #  zip -qq -r --symlinks  ./til-dev.zip .
        #shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_NEW_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_NEW_SECRET_KEY }}
          aws-region: ap-northeast-2
       #
      - name: Upload to AWS S3 # AWS S3 에 업로드
        run: | # 텍스트 블록의 시작
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .
  #--ignore-hidden-files \
      - name: Deploy to AWS EC2 from S3 # S3에 올린 것을 EC2로 배포하는 작업
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
